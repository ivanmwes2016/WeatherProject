{"ast":null,"code":"var _jsxFileName = \"/Users/greatcommissionmedia/weather-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nconst API_key = \"ce2f3b60a12b376f9013c31c56225ca7\";\n{\n  /** SETTING THE CONSTRUCTOR */\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async () => {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_key}`);\n      const response = await api_call.json();\n      {\n        /** converts the data in Json format */\n      }\n      console.log(response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        celsius: this.calCelcius(response.main.temp),\n        temp_max: this.calCelcius(response.main.temp_max),\n        temp_min: this.calCelcius(response.main.temp_min),\n        description: response.weather[0].description,\n        feeling: this.calCelcius(response.main.feels_like)\n      });\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      feeling: undefined,\n      error: false\n    };\n    this.getWeather();\n    this.weather_icon = {\n      Thunderstorm: \"wi-thuderstorm\"\n    };\n  }\n  /** TO CONVERT TEMP TO DEGREES */\n\n\n  calCelcius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    /** To Convert to integer */\n\n    return cell;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      feeling: this.state.feeling,\n      weather_icon: this.state.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/greatcommissionmedia/weather-app/src/App.js"],"names":["React","Component","Weather","API_key","App","constructor","getWeather","api_call","fetch","response","json","console","log","setState","city","name","country","sys","celsius","calCelcius","main","temp","temp_max","temp_min","description","weather","feeling","feels_like","state","undefined","icon","error","weather_icon","Thunderstorm","cell","Math","floor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAO,sCAAP;AACA,OAAO,qCAAP;AAEA,MAAMC,OAAO,GAAG,kCAAhB;AACA;AAAC;AAA+B;;AAChC,MAAMC,GAAN,SAAkBJ,KAAK,CAACC,SAAxB,CAAiC;AAC/BI,EAAAA,WAAW,GAAE;AACX;;AADW,SA4BbC,UA5Ba,GA4BA,YAAS;AACpB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oEAAmEL,OAAQ,EAA7E,CAA5B;AAEA,YAAMM,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AAAuC;AAAC;AAAwC;AAChFC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,WAAKI,QAAL,CAAc;AACZC,QAAAA,IAAI,EAACL,QAAQ,CAACM,IADF;AAEZC,QAAAA,OAAO,EAACP,QAAQ,CAACQ,GAAT,CAAaD,OAFT;AAGZE,QAAAA,OAAO,EAAC,KAAKC,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcC,IAA9B,CAHI;AAIZC,QAAAA,QAAQ,EAAE,KAAKH,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcE,QAA9B,CAJE;AAKZC,QAAAA,QAAQ,EAAE,KAAKJ,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcG,QAA9B,CALE;AAMZC,QAAAA,WAAW,EAACf,QAAQ,CAACgB,OAAT,CAAiB,CAAjB,EAAoBD,WANpB;AAOZE,QAAAA,OAAO,EAAC,KAAKP,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcO,UAA9B;AAPI,OAAd;AAWD,KA7CY;;AAEX,SAAKC,KAAL,GAAa;AACXd,MAAAA,IAAI,EAAEe,SADK;AAEXb,MAAAA,OAAO,EAAEa,SAFE;AAGXC,MAAAA,IAAI,EAACD,SAHM;AAIXT,MAAAA,IAAI,EAACS,SAJM;AAKXX,MAAAA,OAAO,EAACW,SALG;AAMXP,MAAAA,QAAQ,EAACO,SANE;AAOXN,MAAAA,QAAQ,EAACM,SAPE;AAQXL,MAAAA,WAAW,EAAE,EARF;AASXE,MAAAA,OAAO,EAAEG,SATE;AAUXE,MAAAA,KAAK,EAAE;AAVI,KAAb;AAYA,SAAKzB,UAAL;AAEA,SAAK0B,YAAL,GAAmB;AACjBC,MAAAA,YAAY,EAAC;AADI,KAAnB;AAID;AAED;;;AACAd,EAAAA,UAAU,CAACE,IAAD,EAAM;AACd,QAAIa,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWf,IAAI,GAAG,MAAlB,CAAX;AAAsC;;AACtC,WAAOa,IAAP;AACD;;AAuBDG,EAAAA,MAAM,GAAE;AACN,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,OAAD;AACA,MAAA,IAAI,EAAG,KAAKT,KAAL,CAAWd,IADlB;AAEA,MAAA,OAAO,EAAE,KAAKc,KAAL,CAAWZ,OAFpB;AAGA,MAAA,YAAY,EAAE,KAAKY,KAAL,CAAWV,OAHzB;AAIA,MAAA,QAAQ,EAAI,KAAKU,KAAL,CAAWN,QAJvB;AAKA,MAAA,QAAQ,EAAI,KAAKM,KAAL,CAAWL,QALvB;AAMA,MAAA,WAAW,EAAE,KAAKK,KAAL,CAAWJ,WANxB;AAOA,MAAA,OAAO,EAAI,KAAKI,KAAL,CAAWF,OAPtB;AAQA,MAAA,YAAY,EAAI,KAAKE,KAAL,CAAWE,IAR3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF;AAgBD;;AAnE8B;;AAwEjC,eAAe1B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nconst API_key = \"ce2f3b60a12b376f9013c31c56225ca7\"\n{/** SETTING THE CONSTRUCTOR */}\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description: \"\",\n      feeling: undefined,\n      error: false\n  };\n    this.getWeather();\n\n    this.weather_icon ={\n      Thunderstorm:\"wi-thuderstorm\"\n    }\n\n  }\n\n  /** TO CONVERT TEMP TO DEGREES */\n  calCelcius(temp){\n    let cell = Math.floor(temp - 273.15); /** To Convert to integer */\n    return cell;\n  }\n\n  getWeather = async()=>{\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_key}`);\n\n    const response = await api_call.json();{/** converts the data in Json format */}\n    console.log(response);\n\n    this.setState({\n      city:response.name,\n      country:response.sys.country,\n      celsius:this.calCelcius(response.main.temp),\n      temp_max: this.calCelcius(response.main.temp_max),\n      temp_min: this.calCelcius(response.main.temp_min),\n      description:response.weather[0].description,\n      feeling:this.calCelcius(response.main.feels_like)\n     \n\n    })\n  };\n\n\n  \n  render(){\n    return(\n      <div className=\"App\">\n      <Weather \n      city ={this.state.city} \n      country={this.state.country} \n      temp_celsius={this.state.celsius}\n      temp_max = {this.state.temp_max}\n      temp_min = {this.state.temp_min}\n      description={this.state.description}\n      feeling = {this.state.feeling}\n      weather_icon = {this.state.icon}\n      \n      />\n      \n       </div>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}